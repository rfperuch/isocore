include(CheckCCompilerFlag)
include(GNUInstallDirs)

find_package(Doxygen)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(_ISOLARIO_SETUP_DIR "${CMAKE_CURRENT_LIST_DIR}")

function (isolario_default_compile_options)
    set(OPTIONS PURE)
    set(SINGLE_VALUE TARGET)
    set(MULTI_VALUE "")

    cmake_parse_arguments(PARSED_ARGS "${OPTIONS}" "${SINGLE_VALUE}" "${MULTI_VALUE}" ${ARGN})

    if (NOT PARSED_ARGS_TARGET)
        message(FATAL_ERROR "isolario_default_compile_options must have a TARGET")
    endif ()

    set_property(TARGET ${PARSED_ARGS_TARGET} PROPERTY C_STANDARD 11)
    set_property(TARGET ${PARSED_ARGS_TARGET} PROPERTY C_STANDARD_REQUIRED True)
    if (PARSED_ARGS_PURE)
        set_property(TARGET ${PARSED_ARGS_TARGET} PROPERTY C_EXTENSIONS False)
    endif ()
    if (CMAKE_COMPILER_IS_GNUC)
        # need to explicitly link to stdc++fs on GNUC and allow taking backtrace symbols
        target_link_libraries(${PARSED_ARGS_TARGET} PRIVATE -rdynamic)
    endif ()

    if (ENABLE_CODE_COVERAGE)
        if (NOT CMAKE_BUILD_TYPE MATCHES "Debug")
            message(WARNING "ENABLE_CODE_COVERAGE ignored, must ONLY be used in Debug builds!")
        else()
            set(CMAKE_REQUIRED_LIBRARIES "--coverage")

            CHECK_CXX_COMPILER_FLAG("--coverage" coverage_SUPPORTED)
            if (coverage_SUPPORTED)
                target_compile_options(${PARSED_ARGS_TARGET} PRIVATE --coverage)
                target_link_libraries(${PARSED_ARGS_TARGET} PRIVATE --coverage)
            else ()
                message(WARNING "ENABLE_CODE_COVERAGE ignored, compiler complains about --coverage flag")
            endif ()

            unset(CMAKE_REQUIRED_LIBRARIES)
        endif()
    endif()
    if (ENABLE_CODE_PROFILE)
        set(CMAKE_REQUIRED_LIBRARIES "-pg")
        CHECK_CXX_COMPILER_FLAG("-pg" pg_SUPPORTED)
        set(CMAKE_REQUIRED_LIBRARIES "-fprofile-generate")
        CHECK_CXX_COMPILER_FLAG("-fprofile-generate" generate_SUPPORTED)
        if (pg_SUPPORTED AND generate_SUPPORTED)
            target_compile_options(${PARSED_ARGS_TARGET} PRIVATE -pg -fprofile-generate)
            target_link_libraries(${PARSED_ARGS_TARGET} PRIVATE -pg -fprofile-generate)
        else ()
            message(WARNING "ENABLE_CODE_PROFILE ignored, compiler complains about -pg -fprofile-generate flags")
        endif ()

        unset(CMAKE_REQUIRED_LIBRARIES)
    endif ()

    CHECK_C_COMPILER_FLAG("-Wall" Wall_SUPPORTED)
    CHECK_C_COMPILER_FLAG("-Wextra" Wextra_SUPPORTED)
    CHECK_C_COMPILER_FLAG("-pedantic-errors" pedantic_SUPPORTED)
    if (Wall_SUPPORTED)
        target_compile_options(${PARSED_ARGS_TARGET} PRIVATE -Wall)
    endif ()
    if (Wextra_SUPPORTED)
        target_compile_options(${PARSED_ARGS_TARGET} PRIVATE -Wextra -Wno-missing-braces -Wno-missing-field-initializers)
    endif ()
    if (pedantic_SUPPORTED)
        target_compile_options(${PARSED_ARGS_TARGET} PRIVATE -pedantic-errors)
    endif ()
endfunction ()

function (isolario_docs)
    set(OPTIONS "")
    set(SINGLE_VALUE TARGET PROJECT_NAME PROJECT_BRIEF OUTPUT_DIR)
    set(MULTI_VALUE FILES)

    cmake_parse_arguments(PARSED_ARGS "${OPTIONS}" "${SINGLE_VALUE}" "${MULTI_VALUE}" ${ARGN})

    if (NOT PARSED_ARGS_TARGET)
        message(FATAL_ERROR "isolario_docs must have a TARGET")
    endif ()
    if (NOT PARSED_ARGS_OUTPUT_DIR)
        message(FATAL_ERROR "isolario_docs must have a OUTPUT_DIR")
    endif ()
    if (NOT PARSED_ARGS_PROJECT_NAME)
        set(PARSED_ARGS_PROJECT_NAME "${PROJECT_NAME}")
    endif ()
    if (NOT PARSED_ARGS_PROJECT_BRIEF)
        set(PARSED_ARGS_PROJECT_BRIEF "${PROJECT_DESCRIPTION}")
    endif ()
    if (NOT PARSED_ARGS_FILES)
        message(FATAL_ERROR "isolario_docs must have a directory/file list")
    endif ()

    if (${DOXYGEN_FOUND})
        set(DOXYGEN_GENERATE_HTML YES)
        set(DOXYGEN_GENERATE_LATEX YES)
        set(DOXYGEN_GENERATE_MAN YES)
        set(DOXYGEN_PROJECT_NAME "${PARSED_ARGS_PROJECT_NAME}")
        set(DOXYGEN_PROJECT_BRIEF "${PARSED_ARGS_PROJECT_BRIEF}")
        set(DOXYGEN_PROJECT_LOGO "${_ISOLARIO_SETUP_DIR}/Logo.png")
        set(DOXYGEN_OUTPUT_DIRECTORY "${PARSED_ARGS_OUTPUT_DIR}")
        set(DOXYGEN_EXAMPLE_PATH "${CMAKE_SOURCE_DIR}")
        doxygen_add_docs(${PARSED_ARGS_TARGET}
                         ${PARSED_ARGS_FILES}
                         COMMENT "Generate documentation pages for ${PARSED_ARGS_TARGET}")
    endif()

endfunction ()
